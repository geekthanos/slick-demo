#!/usr/bin/env bash

export DOCKER_REGISTRY=reg.samsungpaydev.us
export PROJ_DIR="$( cd "$( dirname "$0" )" && pwd )"
export PROJ_NAME="$( basename $PROJ_DIR )"
export DC_CASSANDRA=cqldb
export DC_DEALS=deals
export DC_ES=elasticsearch
export DC_KIBANA=kibana

export REPO_CASSANDRA=cassandra:3.7
export REPO_SUAA=$DOCKER_REGISTRY/suaa
export REPO_RES=$DOCKER_REGISTRY/res
export REPO_ES=elasticsearch:5.5.2
export REPO_KIBANA=kibana

export COMPOSE_PROJECT_NAME=$DC_DEALS

export SPAY_REPO=http://devmvnrepo.looppay.com/repository/internal/
export SPAY_SNAPSHOT_REPO=http://devmvnrepo.looppay.com/repository/snapshots/

PORT_DEBUG=8005

function create_keyspace {
	KS_RES=$( docker exec -it $DC_CASSANDRA cqlsh -e "CREATE KEYSPACE $1 WITH REPLICATION = { 'class' : 'SimpleStrategy', 'replication_factor' : 1 };" )
	RES=$?
	if [ "$RES" -eq 0 ]; then
        echo -e "\033[32;2mKeyspace '$1' created\033[0m"
        return 0
    elif [ "$RES" -eq 2 ]; then
        echo $KS_RES
        return 0
    fi

    return 1
}

function env_destroy {
    docker-compose down --rmi all
}

function env_health_check {
    {
        while :
        do
            curl -XGET -m 2 http://localhost:9000/healthcheck 1>/dev/null 2>/dev/null
            if [ $? -eq 0 ]; then
                echo -e "\033[32;2mDeals-Rest service is UP\033[0m"
                exit 0
            fi
            sleep 2
        done
    }&
    trap 'kill $! 1>/dev/null 2>/dev/null' SIGINT INT EXIT
}

function env_start {
    docker-compose up -d $DC_CASSANDRA
    if [ "$?" -ne 0 ]; then
       exit "$?"
    fi

    # Is Cassandra only mode
    if [ "$1" != "-c" ]; then
        docker-compose up -d
        if [ "$?" -ne 0 ]; then
            exit "$?"
        fi
        echo "Starting environment ..."
    else
        echo "Starting cassandra ..."
    fi

    # Try till cassandra start up.
    while :
    do
        echo -n "."
        docker exec -it $DC_CASSANDRA cqlsh localhost -e "USE system;" 1>/dev/null 2>/dev/null;
        if [ $? -eq 0 ]; then
            echo
            break
        fi
        sleep 2
    done

    if [ "$1" != "-c" ]; then
        create_keyspace $DC_DEALS
    fi
}

function traverse_data_file() {
    DOCKER_TEMP_FOLDER="/tmp"
    for FILE in "$1"/*
    do
        if [ ! -d "${FILE}" ] ; then
    		FILENAME=$( basename ${FILE} )
    		TABLENAME="${FILENAME%.*}"
        	if [[ $FILE == *.csv ]]; then
        	    # copy files to docker image in case host doesn't have cqlsh command
        	    docker cp ${FILE} $DC_CASSANDRA:$DOCKER_TEMP_FOLDER
    			echo "Loading ${TABLENAME} into db ..."
    		    docker exec -it $DC_CASSANDRA cqlsh -e "USE $DC_DEALS; COPY ${TABLENAME} FROM '${DOCKER_TEMP_FOLDER}/${FILENAME}' WITH ERRFILE = '/dev/null/';"
    		    docker exec -it $DC_CASSANDRA rm -f ${DOCKER_TEMP_FOLDER}/${FILENAME} 1>/dev/null 2>/dev/null
    			echo
    		elif [[ $FILE == *.cql ]]; then
    		    docker cp ${FILE} $DC_CASSANDRA:/tmp
    		    echo "Loading ${FILENAME} into db ..."
    		    docker exec -it $DC_CASSANDRA cqlsh -e "SOURCE '${DOCKER_TEMP_FOLDER}/${FILENAME}'"
    		    docker exec -it $DC_CASSANDRA rm -f ${DOCKER_TEMP_FOLDER}/${FILENAME} 1>/dev/null 2>/dev/null
    		    echo
            else
    	        echo "${FILENAME} is not a valid data file to load."
            fi
    	else
    	    traverse_data_file "${FILE}"
    	fi
    done
}

function env_load() {
    if [ -z "$1" ]; then
        echo "Invalid Argument. Usage: data <filepath>"
        exit 1
    elif [ ! -d "$1" ]; then
        echo "Not a Directory."
        exit 1
    fi

    env_start -c
    traverse_data_file $1
}

function print_usage {
	echo "Print Usage TODO: "
	echo
	echo "    A handy tool to ease project building and app development"
	echo
	echo "COMMAND"
	echo "    cqlsh      run cqlsh to access cassandra"
	echo "    data       Specify directory path of exported data (.csv) and load into docker cassandra db"
	echo "    destroy    destroy the whole created env"
	echo "    staging    Run the project in staging environment"
	echo "    start      Run the project in local environment"
    echo "    up         Start environment only"
	echo "    help       print this message"
	echo
}

case $1 in
    cqlsh)
		shift
		docker exec -it $DC_CASSANDRA cqlsh "$@"
		;;
    data)
        shift
        env_load $@
        ;;
    destroy)
        env_destroy
        ;;
    help)
        print_usage
        ;;
    staging)
        ./activator -jvm-debug $PORT_DEBUG run
        ;;
    start)
        env_start
        env_health_check
        ./activator -Dconfig.file=conf/application.localhost.conf -jvm-debug $PORT_DEBUG run
        ;;
	up)
	    env_start
	    ;;
    *)
        print_usage
        ;;
esac